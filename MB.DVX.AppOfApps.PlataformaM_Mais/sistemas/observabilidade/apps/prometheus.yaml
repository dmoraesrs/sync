
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus
  namespace: plataforma-m-mais
spec:
  project: default
  source:
    repoURL: https://charts.bitnami.com/bitnami
    chart: kube-prometheus
    targetRevision: 9.6.3 
    helm:
      values: |
        prometheus:
          enabled: true
          service:
            type: ClusterIP
            ports:
              http: 9090
          additionalScrapeConfigs:
            enabled: true
            type: internal
            internal:
              jobList:
                - job_name: 'istio-control-plane'
                  metrics_path: /metrics
                  scheme: http
                  static_configs:
                    - targets: ['istiod.istio-system.svc.cluster.local:15014']
                - job_name: 'istio-ingressgateway'
                  metrics_path: /stats/prometheus
                  scheme: http
                  kubernetes_sd_configs:
                    - role: endpoints
                      namespaces:
                        names: ['istio-system']
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_namespace]
                      action: keep
                      regex: istio-ingressgateway;istio-system
                - job_name: 'argocd-server'
                  metrics_path: /metrics
                  scheme: http
                  static_configs:
                    - targets: ['argocd-server-metrics.plataforma-m-mais.svc.cluster.local:8083']
                - job_name: 'istio-mesh'
                  kubernetes_sd_configs:
                    - role: pod
                  relabel_configs:
                    - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_namespace, __meta_kubernetes_pod_label_istio]
                      action: keep
                      regex: istio-ingressgateway;istio-system
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "1Gi"
              cpu: "200m"
          nodeSelector:
            layer: apps
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: layer
                        operator: In
                        values:
                        - apps
        alertmanager:
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          nodeSelector:
            layer: apps
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: layer
                        operator: In
                        values:
                        - apps
        operator:
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          nodeSelector:
            layer: apps
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: layer
                        operator: In
                        values:
                        - apps
        blackboxExporter:
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          nodeSelector:
            layer: apps
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: layer
                        operator: In
                        values:
                        - apps
  destination:
    server: https://kubernetes.default.svc
    namespace: observabilidade
  syncPolicy:
    automated:
      prune: true
      selfHeal: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-extra-scrape
  namespace: observabilidade
data:
  scrape-configs.yaml: |    
    - job_name: 'istio-control-plane'
      metrics_path: /metrics
      scheme: http
      static_configs:
        - targets: ['istiod.istio-system.svc.cluster.local:15014']

    - job_name: 'istio-ingressgateway'
      metrics_path: /stats/prometheus
      scheme: http
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names: ['istio-system']
      relabel_configs:
        - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_namespace]
          action: keep
          regex: istio-ingressgateway;istio-system

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: prometheus-virtualservice
  namespace: observabilidade
spec:
  hosts:
    - "prometheus.plataformammais-sandbox.n-mercantil.com.br"
  gateways:
    - istio-system/istio-ingressgateway
  http:
    - match:
        - uri:
            prefix: "/"
      route:
        - destination:
            host: prometheus-kube-prometheus-prometheus
            port:
              number: 9090
---

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-mesh
  namespace: observabilidade
spec:
  namespaceSelector:
    any: true
  selector:
    matchLabels:
      istio: enabled
  endpoints:
    - port: http-monitoring
      interval: 15s